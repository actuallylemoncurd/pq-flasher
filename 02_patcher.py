#!/usr/bin/env python3
import struct
from argparse import ArgumentParser
import crcmod

# fmt: off

# (addr, orig, new (optional) )
patches = {
    "2501": [
        (0x0005E7A8, b"1K0909144E \x002501", b"1K0909144E \x002502"),  # Software number and version
        (0x0005E221, b"\x64", b"\x00"),  # Disengage countdown
        (0x0005E283, b"\x32", b"\x00"),  # Min speed
        (0x0005FFFC, b"Ende", b"\xff\xff\xff\xff"),  # End of FW marker
    ],
    "3501": [
        (0x0005D828, b"1K0909144R \x003501", b"1K0909144R \x003502"),  # Software number and version
        (0x0005D289, b"\x64", b"\x00"),  # Disengage countdown
        (0x0005D2FA, b"\x14", b"\x00"),  # Min speed

        # Custom steering maps, switchable with DCC??

        (0x0005e794, b"\x33\x31\x33\x00\x33\x31\x33\x00\x33\x31\x34",\
                     b"\x6D\x70\x31\x00\x6D\x70\x32\x00\x6D\x70\x33"),  # ASCII map names, renamed to mp1, mp2, and mp3

        # 1: normal golf / NMS         normal (dont need to edit this one, commented it out)
        # 2: mobility, floaty steer!   comfort
        # 3: TTRS/RS3, sporty!!        sport

        #(0x0005e1dc, b"1K0909144R \x003501", b"1K0909144R \x003502"),
        (0x0005e200, b"\x08\x00\x00\x00\x0E\x00\x37\x00\x6D\x00\xB1\x00\x11\x01\x43\x01\x50\x01\x00\x00\x16\x00\x30\x01\xD6\x02\xF4\x05\x69\x0C\xD2\x10\x00\x12\x00\x00",\
                     b"\x08\x00\x00\x00\x07\x00\x1F\x00\xC3\x00\xD8\x00\xF2\x00\x0D\x01\x21\x01\x00\x00\x58\x00\xE4\x01\x00\x0E\x77\x0F\xAB\x10\x5E\x11\x7C\x11\x00\x00"),
        (0x0005e224, b"\x08\x00\x00\x00\x0E\x00\x37\x00\x6D\x00\xB1\x00\x11\x01\x43\x01\x6C\x01\x00\x00\x12\x00\xF3\x00\x45\x02\xC3\x04\xEE\x09\x75\x0D\x00\x12\x00\x00",\
                     b"\x08\x00\x00\x00\x0D\x00\x4D\x00\x88\x00\xBE\x00\x10\x01\x59\x01\xA1\x01\x00\x00\x7D\x00\x33\x03\xB3\x05\x00\x08\xBC\x0B\xA2\x0F\x00\x14\x00\x00"),

        #(0x0005e248, b"1K0909144R \x003501", b"1K0909144R \x003502"),
        (0x0005e26c, b"\x08\x00\x00\x00\x0E\x00\x37\x00\x6D\x00\xB1\x00\x11\x01\x98\x01\x9F\x01\x00\x00\x0F\x00\xE7\x00\x24\x02\x44\x04\x19\x09\x70\x11\x00\x12\x00\x00",\
                     b"\x08\x00\x00\x00\x07\x00\x1F\x00\x3E\x00\x65\x00\x9B\x00\xE9\x00\x33\x01\x00\x00\x14\x00\xAB\x00\xA4\x01\x5C\x03\x00\x07\x1C\x0D\x9A\x11\x00\x00"),
        (0x0005e290, b"\x08\x00\x00\x00\x0E\x00\x37\x00\x6D\x00\xB1\x00\x11\x01\x98\x01\xBE\x01\x00\x00\x0C\x00\xB9\x00\xB6\x01\x6A\x03\x47\x07\xF3\x0D\x00\x12\x00\x00",\
                     b"\x08\x00\x00\x00\x0E\x00\x4D\x00\x88\x00\xBE\x00\x10\x01\x98\x01\x1C\x02\x00\x00\x31\x00\x0B\x01\x1F\x02\x4C\x03\xA0\x05\x33\x0B\x62\x12\x00\x00"),

        #(0x0005e2b4, b"1K0909144R \x003501", b"1K0909144R \x003502"),
        (0x0005e2d8, b"\x08\x00\x00\x00\x0E\x00\x37\x00\x6D\x00\xB1\x00\x11\x01\x98\x01\xEF\x01\x00\x00\x07\x00\x9A\x00\x76\x01\xD3\x02\xF6\x05\xA4\x0C\x00\x12\x00\x00",\
                     b"\x08\x00\x00\x00\x07\x00\x1F\x00\x3E\x00\x65\x00\x9B\x00\xE9\x00\x37\x01\x00\x00\x08\x00\x62\x00\x22\x01\x7C\x02\x3A\x05\xE6\x0A\x99\x11\x00\x00"),
        (0x0005e2fc, b"\x08\x00\x00\x00\x0E\x00\x37\x00\x6D\x00\xB1\x00\x11\x01\x98\x01\xFE\x01\x00\x00\x06\x00\x7B\x00\x2B\x01\x42\x02\xC5\x04\x1D\x0A\x00\x12\x00\x00",\
                     b"\x08\x00\x00\x00\x0E\x00\x4D\x00\x89\x00\xBE\x00\x10\x01\x97\x01\x20\x02\x00\x00\x0E\x00\x65\x00\xEA\x00\x97\x01\x54\x03\x41\x07\x2F\x0F\x00\x00"),

        #(0x0005e320, b"1K0909144R \x003501", b"1K0909144R \x003502"),
        (0x0005e344, b"\x08\x00\x00\x00\x0E\x00\x37\x00\x6D\x00\xB1\x00\x11\x01\x98\x01\x20\x02\x00\x00\x03\x00\x5C\x00\xF1\x00\xC6\x01\x9F\x03\x38\x08\xD7\x0E\x00\x00",\
                     b"\x08\x00\x00\x00\x07\x00\x1F\x00\x3E\x00\x65\x00\x9C\x00\xE9\x00\x37\x01\x00\x00\x03\x00\x3D\x00\xC1\x00\xB8\x01\xE0\x03\x27\x08\x9E\x0E\x00\x00"),
        (0x0005e368, b"\x08\x00\x00\x00\x0E\x00\x37\x00\x6D\x00\xB1\x00\x11\x01\x98\x01\x20\x02\x00\x00\x02\x00\x4A\x00\xC1\x00\x6B\x01\xE6\x02\x93\x06\xD7\x0E\x00\x00",\
                     b"\x08\x00\x00\x00\x0E\x00\x4D\x00\x88\x00\xBF\x00\x10\x01\x98\x01\x20\x02\x00\x00\x05\x00\x3E\x00\x78\x00\xE2\x00\xEC\x01\xA8\x04\x71\x0D\x00\x00"),

        #(0x0005e38c, b"1K0909144R \x003501", b"1K0909144R \x003502"),
        (0x0005e3b0, b"\x08\x00\x00\x00\x0E\x00\x37\x00\x6D\x00\xB1\x00\x11\x01\x98\x01\x20\x02\x00\x00\x01\x00\x25\x00\x5C\x00\xDD\x00\x33\x02\x69\x05\x8A\x0A\x00\x00",\
                     b"\x08\x00\x00\x00\x07\x00\x1F\x00\x3E\x00\x65\x00\x9C\x00\xE9\x00\x37\x01\x00\x00\x02\x00\x1B\x00\x6E\x00\x15\x01\x90\x02\xAA\x05\xD1\x0A\x00\x00"),
        (0x0005e3d4, b"\x08\x00\x00\x00\x0E\x00\x37\x00\x6D\x00\xB1\x00\x11\x01\x98\x01\x20\x02\x00\x00\x01\x00\x1E\x00\x4A\x00\xB1\x00\xC2\x01\x54\x04\x8A\x0A\x00\x00",\
                     b"\x08\x00\x00\x00\x0E\x00\x4D\x00\x88\x00\xBE\x00\x10\x01\x98\x01\x20\x02\x00\x00\x06\x00\x21\x00\x39\x00\x58\x00\xBC\x00\x15\x02\xD1\x0B\x00\x00"),

        #(0x0005e3f8, b"1K0909144R \x003501", b"1K0909144R \x003502"),
        (0x0005e41c, b"\x08\x00\x00\x00\x0D\x00\x36\x00\x6D\x00\xB1\x00\x10\x01\x98\x01\x20\x02\x00\x00\x08\x00\x62\x00\x22\x01\x7B\x02\x29\x05\xE4\x0A\x9A\x11\x00\x00",\
                     b"\x08\x00\x00\x00\x0D\x00\x36\x00\x6D\x00\xB1\x00\x10\x01\x98\x01\x20\x02\x00\x00\x08\x00\x62\x00\x22\x01\x7B\x02\x29\x05\xE4\x0A\x9A\x11\x00\x00"),
        (0x0005e440, b"\x08\x00\x00\x00\x0D\x00\x36\x00\x6D\x00\xB1\x00\x10\x01\x98\x01\x20\x02\x00\x00\x08\x00\x62\x00\x22\x01\x7B\x02\x29\x05\xE4\x0A\x9A\x11\x00\x00",\
                     b"\x08\x00\x00\x00\x0D\x00\x36\x00\x6D\x00\xB1\x00\x10\x01\x98\x01\x20\x02\x00\x00\x08\x00\x62\x00\x22\x01\x7B\x02\x29\x05\xE4\x0A\x9A\x11\x00\x00"),
    ]
}

# (checksum addr, start, end)
checksums = {
    "2501": [
        (0x05EFFC, 0x5E000, 0x5EFFC),
    ],
    "3501": [
        #Calibration: 5C000 - 5EFFE
        (0x05DFFC, 0x5C000, 0x5CFFF),
        (0x05DFFE, 0x5CFFF, 0x5DFFC),
        (0x05EFFE, 0x5E000, 0x5EFFE),
    ]
}
# fmt: on


def crc16(dat):
    xmodem_crc_func = crcmod.mkCrcFun(0x11021, rev=False, initCrc=0x0000, xorOut=0x0000)
    crc = xmodem_crc_func(dat)
    return struct.pack(">H", crc)


def verify_checksums(fw_in, config):
    for expected, start, end in config:
        if fw_in[expected : expected + 2] != crc16(fw_in[start:end]):
            return False

    return True


def update_checksums(fw_in, config):
    fw_out = fw_in
    for expected, start, end in config:
        fw_out = fw_out[:expected] + crc16(fw_in[start:end]) + fw_out[expected + 2 :]
    return fw_out


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument("--input", required=True, help="input file to patch")
    parser.add_argument("--output", required=True, help="output file")
    parser.add_argument("--version", default="2501", const="2501", nargs="?", choices=["2501", "3501"])
    args = parser.parse_args()

    with open(args.input, "rb") as input_fw:
        input_fw_s = input_fw.read()

    output_fw_s = input_fw_s

    #assert verify_checksums(output_fw_s, checksums[args.version]) broken with update files?

    for addr, orig, new in patches[args.version]:
        length = len(orig)
        cur = input_fw_s[addr : addr + length]

        assert cur == orig, f"Unexpected values in input FW {cur.hex()} expected {orig.hex()}"

        if new is not None:
            assert len(new) == length
            output_fw_s = output_fw_s[:addr] + new + output_fw_s[addr + length :]
            assert output_fw_s[addr : addr + length] == new

    output_fw_s = update_checksums(output_fw_s, checksums[args.version])

    assert verify_checksums(output_fw_s, checksums[args.version])
    assert len(output_fw_s) == len(input_fw_s)

    with open(args.output, "wb") as output_fw:
        output_fw.write(output_fw_s)
